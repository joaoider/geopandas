#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Script de Setup para o Tutorial Profissional de GeoPandas
============================================================

Este script automatiza a instala√ß√£o e configura√ß√£o do ambiente para o tutorial.
"""

import subprocess
import sys
import os
from pathlib import Path

def verificar_python():
    """Verifica se a vers√£o do Python √© compat√≠vel."""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7+ √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def instalar_dependencias():
    """Instala as depend√™ncias necess√°rias."""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        # Instalando depend√™ncias principais
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Instalando GeoPandas e depend√™ncias
        dependencias = [
            "geopandas>=0.13.0",
            "pandas>=1.3.0",
            "numpy>=1.21.0",
            "matplotlib>=3.5.0",
            "shapely>=1.8.0",
            "pyproj>=3.0.0",
            "fiona>=1.8.0"
        ]
        
        for dep in dependencias:
            print(f"  üì• Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
        
        print("‚úÖ Todas as depend√™ncias foram instaladas com sucesso!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def verificar_instalacao():
    """Verifica se a instala√ß√£o foi bem-sucedida."""
    print("\nüîç Verificando instala√ß√£o...")
    
    try:
        import geopandas as gpd
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        from shapely.geometry import Point
        
        print("‚úÖ GeoPandas:", gpd.__version__)
        print("‚úÖ Pandas:", pd.__version__)
        print("‚úÖ NumPy:", np.__version__)
        print("‚úÖ Matplotlib:", plt.matplotlib.__version__)
        print("‚úÖ Shapely:", Point(0, 0).__class__.__module__)
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def criar_ambiente_virtual():
    """Cria um ambiente virtual para o projeto."""
    print("\nüåç Criando ambiente virtual...")
    
    try:
        # Verificando se venv est√° dispon√≠vel
        subprocess.check_call([sys.executable, "-m", "venv", "--help"], 
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Criando ambiente virtual
        venv_path = Path("venv")
        if not venv_path.exists():
            subprocess.check_call([sys.executable, "-m", "venv", "venv"])
            print("‚úÖ Ambiente virtual criado em 'venv/'")
        else:
            print("‚úÖ Ambiente virtual j√° existe em 'venv/'")
        
        return True
        
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  N√£o foi poss√≠vel criar ambiente virtual (venv n√£o dispon√≠vel)")
        return False

def executar_tutorial():
    """Executa o tutorial para testar a instala√ß√£o."""
    print("\nüöÄ Executando tutorial de teste...")
    
    try:
        # Importando e executando uma fun√ß√£o simples
        import geopandas_tutorial
        
        # Testando cria√ß√£o de dados
        dados = geopandas_tutorial.criar_dados_exemplo()
        print(f"‚úÖ Tutorial funcionando! Criados {len(dados)} pontos de dados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar tutorial: {e}")
        return False

def mostrar_instrucoes():
    """Mostra instru√ß√µes de uso."""
    print("\n" + "="*60)
    print("üéâ SETUP CONCLU√çDO COM SUCESSO!")
    print("="*60)
    
    print("\nüìö Como usar:")
    print("  1. Execute o tutorial: python geopandas_tutorial.py")
    print("  2. Ou use no Jupyter: jupyter notebook")
    print("  3. Ou importe as fun√ß√µes: import geopandas_tutorial")
    
    print("\nüîß Comandos √∫teis:")
    print("  ‚Ä¢ python geopandas_tutorial.py          # Executar tutorial completo")
    print("  ‚Ä¢ python -c 'import geopandas_tutorial' # Testar importa√ß√£o")
    print("  ‚Ä¢ pip list | grep geopandas             # Verificar vers√£o instalada")
    
    print("\nüìÅ Arquivos criados:")
    print("  ‚Ä¢ geopandas_tutorial.py                 # Tutorial principal")
    print("  ‚Ä¢ requirements.txt                      # Depend√™ncias")
    print("  ‚Ä¢ README.md                             # Documenta√ß√£o")
    
    print("\nüöÄ Pr√≥ximos passos:")
    print("  1. Explore o c√≥digo em geopandas_tutorial.py")
    print("  2. Modifique os dados de exemplo")
    print("  3. Adicione suas pr√≥prias funcionalidades")
    print("  4. Compartilhe com a comunidade!")
    
    print("\n---")
    print("Desenvolvido com ‚ù§Ô∏è para a comunidade Python")
    print("Boa sorte com seus projetos geoespaciais!")

def main():
    """Fun√ß√£o principal do setup."""
    print("üöÄ SETUP DO TUTORIAL PROFISSIONAL DE GEOPANDAS")
    print("=" * 60)
    
    # Verifica√ß√µes iniciais
    if not verificar_python():
        sys.exit(1)
    
    # Cria√ß√£o do ambiente virtual (opcional)
    criar_ambiente_virtual()
    
    # Instala√ß√£o das depend√™ncias
    if not instalar_dependencias():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias")
        sys.exit(1)
    
    # Verifica√ß√£o da instala√ß√£o
    if not verificar_instalacao():
        print("‚ùå Falha na verifica√ß√£o da instala√ß√£o")
        sys.exit(1)
    
    # Teste do tutorial
    if not executar_tutorial():
        print("‚ùå Falha na execu√ß√£o do tutorial")
        sys.exit(1)
    
    # Instru√ß√µes finais
    mostrar_instrucoes()

if __name__ == "__main__":
    main()
